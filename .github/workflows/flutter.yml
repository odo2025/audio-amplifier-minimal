name: Flutter Build - Audio Amplifier (Nettoyage Complet)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
      
      - name: Force clean environment
        run: |
          # Supprimer complètement tout l'ancien code
          rm -rf $GITHUB_WORKSPACE/*
          rm -rf $GITHUB_WORKSPACE/.*
          
          # Créer un nouveau projet Flutter complètement propre
          mkdir -p /tmp/flutter_app
          cd /tmp/flutter_app
          flutter create --org com.example audio_app
          
          # Copier le nouveau projet dans l'espace de travail
          cp -r /tmp/flutter_app/audio_app/* $GITHUB_WORKSPACE/
          cp -r /tmp/flutter_app/audio_app/.* $GITHUB_WORKSPACE/ 2>/dev/null || true
          
          # Vérifier que nous partons d'un état propre
          echo "=== Contenu du workspace après nettoyage ==="
          ls -la $GITHUB_WORKSPACE/
          
          # Créer le fichier main.dart SANS flutter_sound
          cat > $GITHUB_WORKSPACE/lib/main.dart << 'EOL'
          import 'package:flutter/material.dart';
          import 'package:permission_handler/permission_handler.dart';
          import 'package:record/record.dart';
          import 'package:audioplayers/audioplayers.dart';
          import 'dart:async';
          import 'dart:io';
          import 'dart:math';
          import 'package:path_provider/path_provider.dart';

          void main() {
            runApp(const AudioAmplifierApp());
          }

          class AudioAmplifierApp extends StatelessWidget {
            const AudioAmplifierApp({super.key});

            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'Audio Amplifier Pro',
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                  useMaterial3: true,
                ),
                home: const AudioAmplifierHome(),
              );
            }
          }

          class AudioAmplifierHome extends StatefulWidget {
            const AudioAmplifierHome({super.key});

            @override
            State<AudioAmplifierHome> createState() => _AudioAmplifierHomeState();
          }

          class _AudioAmplifierHomeState extends State<AudioAmplifierHome> {
            bool _isRunning = false;
            double _amplificationLevel = 1.0; // 0.0 à 2.0 (0% à 200%)
            double _mixLevel = 0.5;
            double _morphingPosition = 0.5;
            double _inputLevel = 0.0;
            double _outputLevel = 0.0;
            
            final AudioRecorder _recorder = AudioRecorder();
            final AudioPlayer _player = AudioPlayer();
            bool _isRecording = false;
            String? _audioPath;
            Timer? _levelTimer;
            Timer? _amplificationTimer;

            @override
            void initState() {
              super.initState();
              _requestPermissions();
              _startLevelMonitoring();
            }

            Future<void> _requestPermissions() async {
              await Permission.microphone.request();
              await Permission.bluetooth.request();
              await Permission.storage.request();
            }

            void _startLevelMonitoring() {
              _levelTimer = Timer.periodic(const Duration(milliseconds: 50), (timer) {
                if (mounted) {
                  setState(() {
                    if (_isRunning) {
                      // Simulation des niveaux audio pour l'interface
                      _inputLevel = 0.3 + (Random().nextDouble() * 0.4);
                      _outputLevel = _inputLevel * _amplificationLevel;
                      if (_outputLevel > 1.0) _outputLevel = 1.0;
                    } else {
                      _inputLevel = 0.0;
                      _outputLevel = 0.0;
                    }
                  });
                }
              });
            }

            Future<void> _toggleAudio() async {
              setState(() {
                _isRunning = !_isRunning;
              });
              
              if (_isRunning) {
                await _startAmplification();
              } else {
                await _stopAmplification();
              }
            }

            Future<void> _startAmplification() async {
              try {
                // Vérifier les permissions
                if (await _recorder.hasPermission()) {
                  // Obtenir le répertoire temporaire
                  final directory = await getTemporaryDirectory();
                  _audioPath = '${directory.path}/audio_temp_${DateTime.now().millisecondsSinceEpoch}.m4a';
                  
                  // Configuration d'enregistrement simple et stable
                  const config = RecordConfig(
                    encoder: AudioEncoder.aacLc,
                    bitRate: 128000,
                    sampleRate: 44100,
                    numChannels: 1,
                  );
                  
                  // Démarrer l'enregistrement
                  await _recorder.start(config, path: _audioPath!);
                  _isRecording = true;
                  
                  // Démarrer le cycle d'amplification
                  _startAmplificationCycle();
                }
              } catch (e) {
                print('Erreur lors du démarrage: $e');
                setState(() {
                  _isRunning = false;
                });
              }
            }

            void _startAmplificationCycle() {
              // Cycle d'amplification avec latence selon le mode
              int cycleMs = _morphingPosition < 0.33 ? 50 : (_morphingPosition < 0.67 ? 100 : 150);
              
              _amplificationTimer = Timer.periodic(Duration(milliseconds: cycleMs), (timer) async {
                if (!_isRunning) {
                  timer.cancel();
                  return;
                }
                
                try {
                  // Arrêter l'enregistrement temporairement
                  String? recordedPath = await _recorder.stop();
                  
                  if (recordedPath != null && File(recordedPath).existsSync()) {
                    // Configurer le volume d'amplification (méthode standard)
                    await _player.setVolume(_amplificationLevel);
                    await _player.setReleaseMode(ReleaseMode.stop);
                    
                    // Jouer l'audio enregistré (sortie automatique vers Bluetooth si connecté)
                    await _player.play(DeviceFileSource(recordedPath));
                    
                    // Redémarrer l'enregistrement pour le cycle suivant
                    if (_isRunning) {
                      final directory = await getTemporaryDirectory();
                      _audioPath = '${directory.path}/audio_temp_${DateTime.now().millisecondsSinceEpoch}.m4a';
                      
                      const config = RecordConfig(
                        encoder: AudioEncoder.aacLc,
                        bitRate: 128000,
                        sampleRate: 44100,
                        numChannels: 1,
                      );
                      
                      await _recorder.start(config, path: _audioPath!);
                    }
                    
                    // Nettoyer l'ancien fichier
                    try {
                      await File(recordedPath).delete();
                    } catch (e) {
                      // Ignorer les erreurs de suppression
                    }
                  }
                } catch (e) {
                  print('Erreur dans le cycle: $e');
                }
              });
            }

            Future<void> _stopAmplification() async {
              try {
                _amplificationTimer?.cancel();
                
                if (_isRecording) {
                  await _recorder.stop();
                  _isRecording = false;
                }
                
                await _player.stop();
                
                // Nettoyer les fichiers temporaires
                if (_audioPath != null && File(_audioPath!).existsSync()) {
                  try {
                    await File(_audioPath!).delete();
                  } catch (e) {
                    // Ignorer les erreurs de suppression
                  }
                }
              } catch (e) {
                print('Erreur lors de l\'arrêt: $e');
              }
            }

            void _updateMorphingPosition(double value) {
              setState(() {
                _morphingPosition = value;
              });
              
              // Redémarrer le cycle avec la nouvelle latence si en cours
              if (_isRunning) {
                _amplificationTimer?.cancel();
                _startAmplificationCycle();
              }
            }

            void _updateAmplification(double value) {
              setState(() {
                _amplificationLevel = value;
              });
              
              // Appliquer immédiatement le nouveau niveau
              if (_isRunning) {
                _player.setVolume(_amplificationLevel);
              }
            }

            void _updateMixLevel(double value) {
              setState(() {
                _mixLevel = value;
              });
            }

            String _getModeText() {
              if (_morphingPosition < 0.33) {
                return "Mode Ultra-rapide (50ms)";
              } else if (_morphingPosition < 0.67) {
                return "Mode Équilibré (100ms)";
              } else {
                return "Mode Haute Qualité (150ms)";
              }
            }

            @override
            void dispose() {
              _levelTimer?.cancel();
              _amplificationTimer?.cancel();
              _recorder.dispose();
              _player.dispose();
              super.dispose();
            }

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: const Text('Audio Amplifier Pro'),
                  backgroundColor: Theme.of(context).colorScheme.inversePrimary,
                ),
                body: SingleChildScrollView(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      // VU-mètres en haut - bien visibles
                      Card(
                        elevation: 6,
                        child: Padding(
                          padding: const EdgeInsets.all(20.0),
                          child: Column(
                            children: [
                              Text(
                                'Niveaux Audio',
                                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 20),
                              Row(
                                children: [
                                  // VU-mètre gauche - Signal entrant
                                  Expanded(
                                    child: Column(
                                      children: [
                                        const Text('ENTRÉE', 
                                          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green)),
                                        const SizedBox(height: 10),
                                        SizedBox(
                                          height: 100,
                                          child: RotatedBox(
                                            quarterTurns: 3,
                                            child: LinearProgressIndicator(
                                              value: _inputLevel,
                                              backgroundColor: Colors.grey[300],
                                              valueColor: const AlwaysStoppedAnimation<Color>(Colors.green),
                                              minHeight: 20,
                                            ),
                                          ),
                                        ),
                                        const SizedBox(height: 10),
                                        Text('${(_inputLevel * 100).round()}%', 
                                          style: const TextStyle(fontWeight: FontWeight.bold)),
                                      ],
                                    ),
                                  ),
                                  const SizedBox(width: 40),
                                  // VU-mètre droite - Signal sortant
                                  Expanded(
                                    child: Column(
                                      children: [
                                        const Text('SORTIE', 
                                          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue)),
                                        const SizedBox(height: 10),
                                        SizedBox(
                                          height: 100,
                                          child: RotatedBox(
                                            quarterTurns: 3,
                                            child: LinearProgressIndicator(
                                              value: _outputLevel,
                                              backgroundColor: Colors.grey[300],
                                              valueColor: const AlwaysStoppedAnimation<Color>(Colors.blue),
                                              minHeight: 20,
                                            ),
                                          ),
                                        ),
                                        const SizedBox(height: 10),
                                        Text('${(_outputLevel * 100).round()}%', 
                                          style: const TextStyle(fontWeight: FontWeight.bold)),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Bouton ON/OFF principal
                      Container(
                        width: 120,
                        height: 120,
                        margin: const EdgeInsets.all(20),
                        child: ElevatedButton(
                          onPressed: _toggleAudio,
                          style: ElevatedButton.styleFrom(
                            shape: const CircleBorder(),
                            backgroundColor: _isRunning ? Colors.red : Colors.green,
                            elevation: 8,
                          ),
                          child: Text(
                            _isRunning ? 'OFF' : 'ON',
                            style: const TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),

                      // Indicateur de statut
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                        decoration: BoxDecoration(
                          color: _isRunning ? Colors.green.withOpacity(0.1) : Colors.grey.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Text(
                          _isRunning ? 'Amplification ACTIVE' : 'Amplification INACTIVE',
                          style: TextStyle(
                            color: _isRunning ? Colors.green : Colors.grey,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Curseur morphing (fader DJ)
                      Card(
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              Text(
                                _getModeText(),
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 10),
                              Row(
                                children: [
                                  const Text('Ultra-rapide', style: TextStyle(fontSize: 12)),
                                  Expanded(
                                    child: Slider(
                                      value: _morphingPosition,
                                      onChanged: _updateMorphingPosition,
                                      divisions: 100,
                                      activeColor: Colors.blue,
                                    ),
                                  ),
                                  const Text('Haute Qualité', style: TextStyle(fontSize: 12)),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Contrôles d'amplification jusqu'à 200%
                      Card(
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              Text(
                                'Amplification: ${(_amplificationLevel * 100).round()}%',
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                  color: _amplificationLevel > 1.5 ? Colors.red : Colors.black,
                                ),
                              ),
                              if (_amplificationLevel > 1.5)
                                const Text(
                                  '⚠️ Niveau élevé - Protégez votre audition',
                                  style: TextStyle(color: Colors.red, fontSize: 12),
                                ),
                              Slider(
                                value: _amplificationLevel,
                                min: 0.0,
                                max: 2.0, // 200%
                                divisions: 200,
                                onChanged: _updateAmplification,
                                activeColor: _amplificationLevel > 1.5 ? Colors.red : Colors.orange,
                              ),
                              const Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: [
                                  Text('0%', style: TextStyle(fontSize: 12)),
                                  Text('100%', style: TextStyle(fontSize: 12)),
                                  Text('200%', style: TextStyle(fontSize: 12, color: Colors.red)),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Contrôles de mixage
                      Card(
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              Text(
                                'Mixage Ambiant/Système: ${(_mixLevel * 100).round()}%',
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Row(
                                children: [
                                  const Text('Ambiant', style: TextStyle(fontSize: 12)),
                                  Expanded(
                                    child: Slider(
                                      value: _mixLevel,
                                      onChanged: _updateMixLevel,
                                      activeColor: Colors.purple,
                                    ),
                                  ),
                                  const Text('Système', style: TextStyle(fontSize: 12)),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Informations techniques
                      Card(
                        elevation: 2,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              Text(
                                'Informations Techniques',
                                style: Theme.of(context).textTheme.titleSmall?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 10),
                              Text(
                                'Latence: ${_morphingPosition < 0.33 ? "50ms" : (_morphingPosition < 0.67 ? "100ms" : "150ms")}\n'
                                'Codec: AAC-LC 44.1kHz\n'
                                'Sortie: Système par défaut',
                                style: const TextStyle(fontSize: 12),
                                textAlign: TextAlign.center,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
          EOL
          
          # Créer le fichier pubspec.yaml SANS flutter_sound
          cat > $GITHUB_WORKSPACE/pubspec.yaml << 'EOL'
          name: audio_amplifier
          description: Application mobile d'amplification et mixage audio en temps réel
          publish_to: 'none'
          version: 1.0.0+1

          environment:
            sdk: '>=3.0.0 <4.0.0'

          dependencies:
            flutter:
              sdk: flutter
            cupertino_icons: ^1.0.2
            permission_handler: ^11.0.1
            record: ^5.0.4
            audioplayers: ^5.2.1
            path_provider: ^2.1.1

          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^3.0.0

          flutter:
            uses-material-design: true
          EOL
          
          # Créer le fichier AndroidManifest.xml
          mkdir -p $GITHUB_WORKSPACE/android/app/src/main
          cat > $GITHUB_WORKSPACE/android/app/src/main/AndroidManifest.xml << 'EOL'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.RECORD_AUDIO" />
              <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
              <uses-permission android:name="android.permission.BLUETOOTH" />
              <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
              <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
              
              <application
                  android:label="Audio Amplifier Pro"
                  android:name="${applicationName}"
                  android:icon="@mipmap/ic_launcher"
                  android:requestLegacyExternalStorage="true">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:theme="@style/LaunchTheme"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
                      android:hardwareAccelerated="true"
                      android:windowSoftInputMode="adjustResize">
                      <meta-data
                        android:name="io.flutter.embedding.android.NormalTheme"
                        android:resource="@style/NormalTheme"
                        />
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
                  <meta-data
                      android:name="flutterEmbedding"
                      android:value="2" />
              </application>
          </manifest>
          EOL
          
          # Créer le fichier build.gradle
          mkdir -p $GITHUB_WORKSPACE/android/app
          cat > $GITHUB_WORKSPACE/android/app/build.gradle << 'EOL'
          plugins {
              id "com.android.application"
              id "kotlin-android"
              id "dev.flutter.flutter-gradle-plugin"
          }

          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }

          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '1'
          }

          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0'
          }

          android {
              namespace "com.example.audio_app"
              compileSdk 34
              ndkVersion flutter.ndkVersion

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }

              kotlinOptions {
                  jvmTarget = '1.8'
              }

              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }

              defaultConfig {
                  applicationId "com.example.audio_app"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
              }

              buildTypes {
                  release {
                      signingConfig signingConfigs.debug
                  }
              }
          }

          flutter {
              source '../..'
          }

          dependencies {}
          EOL
          
          echo "=== Vérification des fichiers créés ==="
          echo "main.dart:"
          head -20 $GITHUB_WORKSPACE/lib/main.dart
          echo ""
          echo "pubspec.yaml:"
          head -20 $GITHUB_WORKSPACE/pubspec.yaml
      
      - name: Clean Flutter cache
        run: |
          flutter clean
          flutter pub cache clean
          rm -rf ~/.pub-cache/hosted/pub.dev/flutter_sound*
      
      - name: Install dependencies
        run: |
          flutter pub get
          echo "=== Dépendances installées ==="
          flutter pub deps
          
      - name: Verify no flutter_sound references
        run: |
          echo "=== Vérification qu'il n'y a pas de références à flutter_sound ==="
          if grep -r "flutter_sound" lib/ || grep -r "setAudioFocus" lib/ || grep -r "AudioFocus" lib/ || grep -r "foodStream" lib/; then
            echo "ERREUR: Des références à flutter_sound ont été trouvées!"
            exit 1
          else
            echo "OK: Aucune référence à flutter_sound trouvée"
          fi
          
      - name: Build APK
        run: |
          flutter build apk --debug --verbose
      
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: audio-amplifier-pro-clean
          path: build/app/outputs/flutter-apk/app-debug.apk

