name: Flutter Build - Audio Amplifier Pro

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.16.0'
          channel: 'stable'
      
      - name: Create Flutter app and customize
        run: |
          mkdir -p /tmp/flutter_app
          cd /tmp/flutter_app
          flutter create --org com.example audio_app
          cp -r /tmp/flutter_app/audio_app/* $GITHUB_WORKSPACE/
          cp -r /tmp/flutter_app/audio_app/.* $GITHUB_WORKSPACE/ 2>/dev/null || true
          
          # Créer le fichier main.dart avec amplification Bluetooth réelle
          cat > $GITHUB_WORKSPACE/lib/main.dart << 'EOL'
          import 'package:flutter/material.dart';
          import 'package:permission_handler/permission_handler.dart';
          import 'package:flutter_sound/flutter_sound.dart';
          import 'dart:async';
          import 'dart:typed_data';
          import 'dart:math';

          void main() {
            runApp(const AudioAmplifierApp());
          }

          class AudioAmplifierApp extends StatelessWidget {
            const AudioAmplifierApp({super.key});

            @override
            Widget build(BuildContext context) {
              return MaterialApp(
                title: 'Audio Amplifier Pro',
                theme: ThemeData(
                  colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
                  useMaterial3: true,
                ),
                home: const AudioAmplifierHome(),
              );
            }
          }

          class AudioAmplifierHome extends StatefulWidget {
            const AudioAmplifierHome({super.key});

            @override
            State<AudioAmplifierHome> createState() => _AudioAmplifierHomeState();
          }

          class _AudioAmplifierHomeState extends State<AudioAmplifierHome> {
            bool _isRunning = false;
            double _amplificationLevel = 1.0; // 0.0 à 2.0 (0% à 200%)
            double _mixLevel = 0.5;
            double _morphingPosition = 0.5;
            double _inputLevel = 0.0;
            double _outputLevel = 0.0;
            
            FlutterSoundRecorder? _recorder;
            FlutterSoundPlayer? _player;
            bool _recorderIsInited = false;
            bool _playerIsInited = false;
            StreamSubscription? _recordingDataSubscription;
            Timer? _levelTimer;

            @override
            void initState() {
              super.initState();
              _initAudio();
              _startLevelMonitoring();
            }

            Future<void> _initAudio() async {
              await Permission.microphone.request();
              await Permission.bluetooth.request();
              
              // Initialiser l'enregistreur
              _recorder = FlutterSoundRecorder();
              await _recorder!.openRecorder();
              _recorderIsInited = true;
              
              // Initialiser le lecteur avec configuration Bluetooth
              _player = FlutterSoundPlayer();
              await _player!.openPlayer();
              _playerIsInited = true;
              
              // Configuration pour forcer la sortie Bluetooth
              await _player!.setAudioFocus(
                mode: AudioFocus.requestFocusAndDuckOthers,
                category: SessionCategory.playAndRecord,
                audioFlags: AudioFlags.allowBluetoothA2DP | AudioFlags.allowAirPlay,
              );
            }

            void _startLevelMonitoring() {
              _levelTimer = Timer.periodic(const Duration(milliseconds: 50), (timer) {
                if (mounted && _isRunning) {
                  setState(() {
                    // Simulation des niveaux pour l'interface
                    _inputLevel = 0.3 + (Random().nextDouble() * 0.4);
                    _outputLevel = _inputLevel * _amplificationLevel;
                    if (_outputLevel > 1.0) _outputLevel = 1.0;
                  });
                }
              });
            }

            Future<void> _toggleAudio() async {
              if (!_recorderIsInited || !_playerIsInited) {
                return;
              }
              
              setState(() {
                _isRunning = !_isRunning;
              });
              
              if (_isRunning) {
                await _startRealTimeAmplification();
              } else {
                await _stopRealTimeAmplification();
              }
            }

            Future<void> _startRealTimeAmplification() async {
              try {
                // Démarrer l'enregistrement en streaming
                var recordingStream = await _recorder!.startRecorder(
                  toStream: _player!.foodSink,
                  codec: Codec.pcm16,
                  sampleRate: 44100,
                  numChannels: 1,
                );
                
                // Traitement en temps réel avec amplification
                _recordingDataSubscription = recordingStream?.listen((buffer) {
                  if (buffer != null) {
                    // Amplifier le signal audio
                    Uint8List amplifiedBuffer = _amplifyAudioBuffer(buffer);
                    
                    // Envoyer vers les écouteurs Bluetooth
                    _player!.foodSink!.add(FoodData(amplifiedBuffer));
                  }
                });
                
                // Démarrer la lecture vers Bluetooth
                await _player!.startPlayer(
                  fromStream: _recorder!.foodStream,
                  codec: Codec.pcm16,
                  sampleRate: 44100,
                  numChannels: 1,
                );
                
              } catch (e) {
                print('Erreur amplification: $e');
              }
            }

            Future<void> _stopRealTimeAmplification() async {
              try {
                await _recordingDataSubscription?.cancel();
                await _recorder!.stopRecorder();
                await _player!.stopPlayer();
                setState(() {
                  _inputLevel = 0.0;
                  _outputLevel = 0.0;
                });
              } catch (e) {
                print('Erreur arrêt: $e');
              }
            }

            Uint8List _amplifyAudioBuffer(Uint8List buffer) {
              // Conversion en samples 16-bit
              var samples = Int16List.view(buffer.buffer);
              var amplifiedSamples = Int16List(samples.length);
              
              for (int i = 0; i < samples.length; i++) {
                // Appliquer l'amplification
                double amplified = samples[i] * _amplificationLevel;
                
                // Limiter pour éviter la distorsion
                if (amplified > 32767) amplified = 32767;
                if (amplified < -32768) amplified = -32768;
                
                amplifiedSamples[i] = amplified.round();
              }
              
              return Uint8List.view(amplifiedSamples.buffer);
            }

            void _updateMorphingPosition(double value) {
              setState(() {
                _morphingPosition = value;
              });
              // Ajuster la latence selon le mode
              if (_player != null && _playerIsInited) {
                double bufferSize = value < 0.33 ? 256 : (value < 0.67 ? 512 : 1024);
                // Configuration de la latence (implémentation simplifiée)
              }
            }

            void _updateAmplification(double value) {
              setState(() {
                _amplificationLevel = value;
              });
            }

            void _updateMixLevel(double value) {
              setState(() {
                _mixLevel = value;
              });
            }

            String _getModeText() {
              if (_morphingPosition < 0.33) {
                return "Mode Ultra-rapide (16-22ms)";
              } else if (_morphingPosition < 0.67) {
                return "Mode Équilibré (22-35ms)";
              } else {
                return "Mode Haute Qualité (35-50ms)";
              }
            }

            @override
            void dispose() {
              _levelTimer?.cancel();
              _recordingDataSubscription?.cancel();
              if (_recorder != null) {
                _recorder!.closeRecorder();
              }
              if (_player != null) {
                _player!.closePlayer();
              }
              super.dispose();
            }

            @override
            Widget build(BuildContext context) {
              return Scaffold(
                appBar: AppBar(
                  title: const Text('Audio Amplifier Pro'),
                  backgroundColor: Theme.of(context).colorScheme.inversePrimary,
                ),
                body: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    children: [
                      // VU-mètres en haut - bien visibles
                      Card(
                        elevation: 6,
                        child: Padding(
                          padding: const EdgeInsets.all(20.0),
                          child: Column(
                            children: [
                              Text(
                                'Niveaux Audio',
                                style: Theme.of(context).textTheme.titleLarge?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 20),
                              Row(
                                children: [
                                  // VU-mètre gauche - Signal entrant
                                  Expanded(
                                    child: Column(
                                      children: [
                                        const Text('ENTRÉE', 
                                          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.green)),
                                        const SizedBox(height: 10),
                                        Container(
                                          height: 100,
                                          child: RotatedBox(
                                            quarterTurns: 3,
                                            child: LinearProgressIndicator(
                                              value: _inputLevel,
                                              backgroundColor: Colors.grey[300],
                                              valueColor: const AlwaysStoppedAnimation<Color>(Colors.green),
                                              minHeight: 20,
                                            ),
                                          ),
                                        ),
                                        const SizedBox(height: 10),
                                        Text('${(_inputLevel * 100).round()}%', 
                                          style: const TextStyle(fontWeight: FontWeight.bold)),
                                      ],
                                    ),
                                  ),
                                  const SizedBox(width: 40),
                                  // VU-mètre droite - Signal sortant
                                  Expanded(
                                    child: Column(
                                      children: [
                                        const Text('SORTIE', 
                                          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.blue)),
                                        const SizedBox(height: 10),
                                        Container(
                                          height: 100,
                                          child: RotatedBox(
                                            quarterTurns: 3,
                                            child: LinearProgressIndicator(
                                              value: _outputLevel,
                                              backgroundColor: Colors.grey[300],
                                              valueColor: const AlwaysStoppedAnimation<Color>(Colors.blue),
                                              minHeight: 20,
                                            ),
                                          ),
                                        ),
                                        const SizedBox(height: 10),
                                        Text('${(_outputLevel * 100).round()}%', 
                                          style: const TextStyle(fontWeight: FontWeight.bold)),
                                      ],
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Bouton ON/OFF principal
                      Container(
                        width: 120,
                        height: 120,
                        margin: const EdgeInsets.all(20),
                        child: ElevatedButton(
                          onPressed: _toggleAudio,
                          style: ElevatedButton.styleFrom(
                            shape: const CircleBorder(),
                            backgroundColor: _isRunning ? Colors.red : Colors.green,
                            elevation: 8,
                          ),
                          child: Text(
                            _isRunning ? 'OFF' : 'ON',
                            style: const TextStyle(
                              fontSize: 24,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),

                      // Indicateur de statut
                      Container(
                        padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                        decoration: BoxDecoration(
                          color: _isRunning ? Colors.green.withOpacity(0.1) : Colors.grey.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(20),
                        ),
                        child: Text(
                          _isRunning ? 'Amplification ACTIVE → Bluetooth' : 'Amplification INACTIVE',
                          style: TextStyle(
                            color: _isRunning ? Colors.green : Colors.grey,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Curseur morphing (fader DJ)
                      Card(
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              Text(
                                _getModeText(),
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              const SizedBox(height: 10),
                              Row(
                                children: [
                                  const Text('Ultra-rapide', style: TextStyle(fontSize: 12)),
                                  Expanded(
                                    child: Slider(
                                      value: _morphingPosition,
                                      onChanged: _updateMorphingPosition,
                                      divisions: 100,
                                      activeColor: Colors.blue,
                                    ),
                                  ),
                                  const Text('Haute Qualité', style: TextStyle(fontSize: 12)),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Contrôles d'amplification jusqu'à 200%
                      Card(
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              Text(
                                'Amplification: ${(_amplificationLevel * 100).round()}%',
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                  color: _amplificationLevel > 1.5 ? Colors.red : Colors.black,
                                ),
                              ),
                              if (_amplificationLevel > 1.5)
                                const Text(
                                  '⚠️ Niveau élevé - Protégez votre audition',
                                  style: TextStyle(color: Colors.red, fontSize: 12),
                                ),
                              Slider(
                                value: _amplificationLevel,
                                min: 0.0,
                                max: 2.0, // 200%
                                divisions: 200,
                                onChanged: _updateAmplification,
                                activeColor: _amplificationLevel > 1.5 ? Colors.red : Colors.orange,
                              ),
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                children: const [
                                  Text('0%', style: TextStyle(fontSize: 12)),
                                  Text('100%', style: TextStyle(fontSize: 12)),
                                  Text('200%', style: TextStyle(fontSize: 12, color: Colors.red)),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),

                      const SizedBox(height: 20),

                      // Contrôles de mixage
                      Card(
                        elevation: 4,
                        child: Padding(
                          padding: const EdgeInsets.all(16.0),
                          child: Column(
                            children: [
                              Text(
                                'Mixage Ambiant/Système: ${(_mixLevel * 100).round()}%',
                                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Row(
                                children: [
                                  const Text('Ambiant', style: TextStyle(fontSize: 12)),
                                  Expanded(
                                    child: Slider(
                                      value: _mixLevel,
                                      onChanged: _updateMixLevel,
                                      activeColor: Colors.purple,
                                    ),
                                  ),
                                  const Text('Système', style: TextStyle(fontSize: 12)),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              );
            }
          }
          EOL
          
          # Créer le fichier AndroidManifest.xml avec permissions Bluetooth étendues
          mkdir -p $GITHUB_WORKSPACE/android/app/src/main
          cat > $GITHUB_WORKSPACE/android/app/src/main/AndroidManifest.xml << 'EOL'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              <uses-permission android:name="android.permission.RECORD_AUDIO" />
              <uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
              <uses-permission android:name="android.permission.BLUETOOTH" />
              <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
              <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
              
              <application
                  android:label="Audio Amplifier Pro"
                  android:name="${applicationName}"
                  android:icon="@mipmap/ic_launcher"
                  android:requestLegacyExternalStorage="true">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:theme="@style/LaunchTheme"
                      android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
                      android:hardwareAccelerated="true"
                      android:windowSoftInputMode="adjustResize">
                      <meta-data
                        android:name="io.flutter.embedding.android.NormalTheme"
                        android:resource="@style/NormalTheme"
                        />
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN"/>
                          <category android:name="android.intent.category.LAUNCHER"/>
                      </intent-filter>
                  </activity>
                  <meta-data
                      android:name="flutterEmbedding"
                      android:value="2" />
              </application>
          </manifest>
          EOL
          
          # Modifier le fichier pubspec.yaml avec flutter_sound pour l'amplification réelle
          cat > $GITHUB_WORKSPACE/pubspec.yaml << 'EOL'
          name: audio_amplifier
          description: Application mobile d'amplification et mixage audio en temps réel
          publish_to: 'none'
          version: 1.0.0+1

          environment:
            sdk: '>=3.0.0 <4.0.0'

          dependencies:
            flutter:
              sdk: flutter
            cupertino_icons: ^1.0.2
            permission_handler: ^11.0.1
            flutter_sound: ^9.2.13
            path_provider: ^2.1.1

          dev_dependencies:
            flutter_test:
              sdk: flutter
            flutter_lints: ^3.0.0

          flutter:
            uses-material-design: true
          EOL
          
          # Modifier le fichier build.gradle pour SDK 34 et optimisations audio
          mkdir -p $GITHUB_WORKSPACE/android/app
          cat > $GITHUB_WORKSPACE/android/app/build.gradle << 'EOL'
          plugins {
              id "com.android.application"
              id "kotlin-android"
              id "dev.flutter.flutter-gradle-plugin"
          }

          def localProperties = new Properties()
          def localPropertiesFile = rootProject.file('local.properties')
          if (localPropertiesFile.exists()) {
              localPropertiesFile.withReader('UTF-8') { reader ->
                  localProperties.load(reader)
              }
          }

          def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
          if (flutterVersionCode == null) {
              flutterVersionCode = '1'
          }

          def flutterVersionName = localProperties.getProperty('flutter.versionName')
          if (flutterVersionName == null) {
              flutterVersionName = '1.0'
          }

          android {
              namespace "com.example.audio_app"
              compileSdk 34
              ndkVersion flutter.ndkVersion

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }

              kotlinOptions {
                  jvmTarget = '1.8'
              }

              sourceSets {
                  main.java.srcDirs += 'src/main/kotlin'
              }

              defaultConfig {
                  applicationId "com.example.audio_app"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode flutterVersionCode.toInteger()
                  versionName flutterVersionName
                  
                  // Optimisations pour l'audio en temps réel
                  ndk {
                      abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
                  }
              }

              buildTypes {
                  release {
                      signingConfig signingConfigs.debug
                      minifyEnabled false
                      shrinkResources false
                  }
                  debug {
                      debuggable true
                  }
              }
              
              packagingOptions {
                  pickFirst '**/libc++_shared.so'
                  pickFirst '**/libjsc.so'
              }
          }

          flutter {
              source '../..'
          }

          dependencies {
              implementation 'androidx.core:core-ktx:1.10.1'
          }
          EOL
      
      - name: Install dependencies
        run: flutter pub get
          
      - name: Build APK
        run: |
          flutter build apk --debug --verbose
      
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: audio-amplifier-pro-bluetooth
          path: build/app/outputs/flutter-apk/app-debug.apk

